AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::LanguageExtensions'
Parameters:
  ImageID:
    Description: Image ID
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  Environment:
    Description: Environment tier
    Type: String

Mappings:
  Environments:
    stage:
      instanceSize: t2.micro
    prod:
      instanceSize: t3.micro

Conditions:
  CreateAdditionalInstances: !Equals [!Ref Environment, prod]

Resources:
  AllowSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub allow-ssh-${Environment}
      GroupDescription: Allows SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 82.102.114.179/32
  Instance1:
  Type: AWS::EC2::Instance
  Properties:
    KeyName: A4L
    ImageId: !Ref ImageID
    InstanceType: !FindInMap [Environments, !Ref Environment, instanceSize]
    SecurityGroupIds:
      - !Ref AllowSSH
    UserData: !Base64 |
      #!/bin/bash -ex
      echo "It worked!" > /root/worked.txt
    Tags:
      - Key: Name
        Value: !Sub "SampleInstance1-${Environment}"
  'Fn::ForEach::AdditionalInstances':
    - Identifier
    - ["2", "3"]
    - Instance${Identifier}:
        Type: AWS::EC2::Instance
        Condition: CreateAdditionalInstances
        Properties:
          KeyName: A4L
          ImageId: !Ref ImageID
          InstanceType: !FindInMap [Environments, !Ref Environment, instanceSize]
          SecurityGroupIds:
            - !Ref AllowSSH
          UserData: !Base64 |
            #!/bin/bash -ex
            echo "It worked!" > /root/worked.txt
          Tags:
            - Key: Name
              Value: !Sub "SampleInstance${Identifier}-${Environment}"

Outputs:
  'Fn::ForEach::IPAddresses':
    - Identifier
    - ["1", "2", "3"]
    - 'IPAddress${Identifier}':
        Value: !GetAtt [!Sub 'Instance${Identifier}', PublicIp]
